// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package it.sister.statportal.odata.domain;

import it.sister.statportal.odata.domain.MdGenericColumn;
import java.lang.Integer;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.PersistenceContext;
import javax.persistence.Table;
import org.springframework.transaction.annotation.Transactional;

privileged aspect MdGenericColumn_Roo_Entity {
    
    declare @type: MdGenericColumn: @Entity;
    
    declare @type: MdGenericColumn: @Table(name = "md_generic_column", schema = "public");
    
    @PersistenceContext
    transient EntityManager MdGenericColumn.entityManager;
    
    @Id
    @GeneratedValue(strategy=GenerationType.AUTO)
    @Column(name = "id", columnDefinition = "int4")
    private Integer MdGenericColumn.id;
    
    public Integer MdGenericColumn.getId() {
        return this.id;
    }
    
    public void MdGenericColumn.setId(Integer id) {
        this.id = id;
    }
    
    @Transactional
    public void MdGenericColumn.persist() throws OdataDomainException{
	validate();
	
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void MdGenericColumn.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            MdGenericColumn attached = MdGenericColumn.findMdGenericColumn(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void MdGenericColumn.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void MdGenericColumn.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public MdGenericColumn MdGenericColumn.merge() throws OdataDomainException{
	validate();
	
        if (this.entityManager == null) this.entityManager = entityManager();
        MdGenericColumn merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager MdGenericColumn.entityManager() {
        EntityManager em = new MdGenericColumn().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long MdGenericColumn.countMdGenericColumns() {
        return entityManager().createQuery("SELECT COUNT(o) FROM MdGenericColumn o", Long.class).getSingleResult();
    }
    
    public static List<MdGenericColumn> MdGenericColumn.findAllMdGenericColumns() {
        return entityManager().createQuery("SELECT o FROM MdGenericColumn o", MdGenericColumn.class).getResultList();
    }
    
    public static MdGenericColumn MdGenericColumn.findMdGenericColumn(Integer id) {
        if (id == null) return null;
        return entityManager().find(MdGenericColumn.class, id);
    }
    
    public static List<MdGenericColumn> MdGenericColumn.findMdGenericColumnEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM MdGenericColumn o", MdGenericColumn.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
