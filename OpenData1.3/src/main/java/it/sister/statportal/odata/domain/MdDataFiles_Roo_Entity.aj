// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package it.sister.statportal.odata.domain;

import it.sister.statportal.odata.domain.MdDataFiles;
import it.sister.statportal.odata.domain.MdDataFilesPK;
import java.util.List;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Table;
import org.springframework.transaction.annotation.Transactional;

privileged aspect MdDataFiles_Roo_Entity {
    
    declare @type: MdDataFiles: @Entity;
    
    declare @type: MdDataFiles: @Table(name = "md_data_files", schema = "public");
    
    @PersistenceContext
    transient EntityManager MdDataFiles.entityManager;
    
    @EmbeddedId
    private MdDataFilesPK MdDataFiles.id;
    
    public MdDataFilesPK MdDataFiles.getId() {
        return this.id;
    }
    
    public void MdDataFiles.setId(MdDataFilesPK id) {
        this.id = id;
    }
    
    @Transactional
    public void MdDataFiles.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void MdDataFiles.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            MdDataFiles attached = MdDataFiles.findMdDataFiles(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void MdDataFiles.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void MdDataFiles.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public MdDataFiles MdDataFiles.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        MdDataFiles merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager MdDataFiles.entityManager() {
        EntityManager em = new MdDataFiles().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long MdDataFiles.countMdDataFileses() {
        return entityManager().createQuery("SELECT COUNT(o) FROM MdDataFiles o", Long.class).getSingleResult();
    }
    
    public static List<MdDataFiles> MdDataFiles.findAllMdDataFileses() {
        return entityManager().createQuery("SELECT o FROM MdDataFiles o", MdDataFiles.class).getResultList();
    }
    
    public static MdDataFiles MdDataFiles.findMdDataFiles(MdDataFilesPK id) {
        if (id == null) return null;
        return entityManager().find(MdDataFiles.class, id);
    }
    
    public static List<MdDataFiles> MdDataFiles.findMdDataFilesEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM MdDataFiles o", MdDataFiles.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
