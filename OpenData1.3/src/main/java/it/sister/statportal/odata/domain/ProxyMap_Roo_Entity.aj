// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package it.sister.statportal.odata.domain;

import it.sister.statportal.odata.domain.ProxyMap;
import java.lang.String;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.PersistenceContext;
import javax.persistence.Table;
import org.springframework.transaction.annotation.Transactional;

privileged aspect ProxyMap_Roo_Entity {
    
    declare @type: ProxyMap: @Entity;
    
    declare @type: ProxyMap: @Table(name = "proxy_map", schema = "public");
    
    @PersistenceContext
    transient EntityManager ProxyMap.entityManager;
    
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "name", columnDefinition = "varchar", length = 255)
    private String ProxyMap.name;
    
    public String ProxyMap.getName() {
        return this.name;
    }
    
    public void ProxyMap.setName(String id) {
        this.name = id;
    }
    
    @Transactional
    public void ProxyMap.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void ProxyMap.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            ProxyMap attached = ProxyMap.findProxyMap(this.name);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void ProxyMap.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void ProxyMap.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public ProxyMap ProxyMap.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        ProxyMap merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager ProxyMap.entityManager() {
        EntityManager em = new ProxyMap().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long ProxyMap.countProxyMaps() {
        return entityManager().createQuery("SELECT COUNT(o) FROM ProxyMap o", Long.class).getSingleResult();
    }
    
    public static List<ProxyMap> ProxyMap.findAllProxyMaps() {
        return entityManager().createQuery("SELECT o FROM ProxyMap o", ProxyMap.class).getResultList();
    }
    
    public static ProxyMap ProxyMap.findProxyMap(String name) {
        if (name == null || name.length() == 0) return null;
        return entityManager().find(ProxyMap.class, name);
    }
    
    public static List<ProxyMap> ProxyMap.findProxyMapEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM ProxyMap o", ProxyMap.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
