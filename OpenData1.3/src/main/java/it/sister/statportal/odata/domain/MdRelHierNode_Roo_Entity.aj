// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package it.sister.statportal.odata.domain;

import it.sister.statportal.odata.domain.MdRelHierNode;
import it.sister.statportal.odata.domain.MdRelHierNodePK;
import java.util.List;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Table;
import org.springframework.transaction.annotation.Transactional;

privileged aspect MdRelHierNode_Roo_Entity {
    
    declare @type: MdRelHierNode: @Entity;
    
    declare @type: MdRelHierNode: @Table(name = "MD_REL_HIER_NODE", schema = "public");
    
    @PersistenceContext
    transient EntityManager MdRelHierNode.entityManager;
    
    @EmbeddedId
    private MdRelHierNodePK MdRelHierNode.id;
    
    public MdRelHierNodePK MdRelHierNode.getId() {
        return this.id;
    }
    
    public void MdRelHierNode.setId(MdRelHierNodePK id) {
        this.id = id;
    }
    
    @Transactional
    public void MdRelHierNode.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void MdRelHierNode.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            MdRelHierNode attached = MdRelHierNode.findMdRelHierNode(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void MdRelHierNode.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void MdRelHierNode.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public MdRelHierNode MdRelHierNode.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        MdRelHierNode merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager MdRelHierNode.entityManager() {
        EntityManager em = new MdRelHierNode().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long MdRelHierNode.countMdRelHierNodes() {
        return entityManager().createQuery("SELECT COUNT(o) FROM MdRelHierNode o", Long.class).getSingleResult();
    }
    
    public static List<MdRelHierNode> MdRelHierNode.findAllMdRelHierNodes() {
        return entityManager().createQuery("SELECT o FROM MdRelHierNode o", MdRelHierNode.class).getResultList();
    }
    
    public static MdRelHierNode MdRelHierNode.findMdRelHierNode(MdRelHierNodePK id) {
        if (id == null) return null;
        return entityManager().find(MdRelHierNode.class, id);
    }
    
    public static List<MdRelHierNode> MdRelHierNode.findMdRelHierNodeEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM MdRelHierNode o", MdRelHierNode.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
