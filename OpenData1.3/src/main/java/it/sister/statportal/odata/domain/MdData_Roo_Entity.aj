// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package it.sister.statportal.odata.domain;

import it.sister.statportal.odata.domain.MdData;
import it.sister.statportal.odata.utility.DBUtils;

import java.lang.Integer;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.PersistenceContext;
import javax.persistence.Table;
import org.springframework.transaction.annotation.Transactional;

privileged aspect MdData_Roo_Entity {
    
    declare @type: MdData: @Entity;
    
    declare @type: MdData: @Table(name = "MD_DATA", schema = "public");
    
    @PersistenceContext
    transient EntityManager MdData.entityManager;
    
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "ID", columnDefinition = "int4")
    private Integer MdData.id;
    
    public Integer MdData.getId() {
        return this.id;
    }
    
    public void MdData.setId(Integer id) {
        this.id = id;
    }
    
    @Transactional
    public void MdData.persist() {
	// se l'uid Ã¨ vuoto si genera
	if(this.getUid() == null || this.getUid().isEmpty()){
	    this.setUid(DBUtils.generateUid());
	}
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void MdData.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            MdData attached = MdData.findMdData(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void MdData.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void MdData.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public MdData MdData.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        MdData merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager MdData.entityManager() {
        EntityManager em = new MdData().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long MdData.countMdDatas() {
        return entityManager().createQuery("SELECT COUNT(o) FROM MdData o WHERE available = true AND (generic_grants = true OR generic_grants = null)", Long.class).getSingleResult();
    }
    
    public static List<MdData> MdData.findAllMdDatas() {
        return entityManager().createQuery("SELECT o FROM MdData o WHERE available = true AND (generic_grants = true OR generic_grants = null)", MdData.class).getResultList();
    }
    
    public static MdData MdData.findMdData(Integer id) {
        if (id == null) return null;
        return entityManager().find(MdData.class, id);
    }
    
    public static List<MdData> MdData.findMdDataEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM MdData o WHERE available = true AND (generic_grants = true OR generic_grants = null)", MdData.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
